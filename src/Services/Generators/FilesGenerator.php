<?php declare(strict_types = 1);

namespace Yormy\TranslationcaptainLaravel\Services\Generators;

use Illuminate\Filesystem\Filesystem;

abstract class FilesGenerator
{

    const VENDORNAME_SEPARATOR = '::';

    protected array $labels;

    //protected string $exportPath = "temp" . DIRECTORY_SEPARATOR. "translation_export";
    protected string $exportPath;

    protected $header = "______GENERATED BY TRANSLATION CAPTAIN______";

    protected $settings;

    public function __construct(array $labels)
    {
        $this->labels = $labels;

        $this->header = "______GENERATED BY TRANSLATION CAPTAIN______ (". date('Y-m-d H:m:s') .")";

//        ??
//        $this->app = App();
//        $this->files = new Filesystem();
    }

    abstract protected function groupnameToFilename(string $groupName, string $locale): string;

    abstract protected function generateFileContents(array $translations) : string;

    public function setHeader(string $header) : self
    {
        $this->header = $header;
        return $this;
    }

    public function setExportPath(string $pathname) : self
    {
        $this->exportPath = $pathname;
        return $this;
    }

    protected function prepareExport(string $locale)
    {
        $groups = $this->labels[$locale];

        foreach ($groups as $groupname => $keys) {
            $filename = $this->groupnameToFilename($groupname , $locale);

            foreach ($keys as $key => $translation)
            {
                $keyToExport = $this->prepareKeyForExport($key);
                $translationToExport = $this->prepareTranslationForExport($translation);
                $this->filesToExport[$filename][$keyToExport] = $translationToExport;
            }
        }
    }

    protected function generateFiles()
    {
        foreach ($this->filesToExport as $filename => $translations) {
            $fullpath = $this->exportPath. DIRECTORY_SEPARATOR. $filename;

            $fileContents = "";
            $fileContents .= $this->filetype->getFileStart($this->header);
            $fileContents .= $this->generateFileContents($translations);
            $fileContents .= $this->filetype->getFileEnd();

            $this->writeFile($fullpath, $fileContents);
        }
    }

    protected function isVendorKey(string $groupName)
    {
        return strpos($groupName, self::VENDORNAME_SEPARATOR) > 0;
    }

    protected function prepareKeyForExport(string $key) : string
    {
        return $key;
    }

    protected function prepareTranslationForExport(string $translation) : string
    {
        return $translation;
    }

    private function writeFile(string $fullpath , string $fileContents)
    {
        if (!file_exists(dirname($fullpath))) {
            mkdir(dirname($fullpath), 0660, true);
        }

        file_put_contents($fullpath, $fileContents);
    }

}
